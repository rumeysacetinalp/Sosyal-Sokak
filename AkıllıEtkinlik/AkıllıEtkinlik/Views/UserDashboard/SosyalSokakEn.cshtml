@{
    Layout = "_Layout1"; // Ana temayı kullanıyoruz
    var kullanıcılar = ViewData["Kullanıcılar"] as IEnumerable<dynamic>;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sosyal Sokak'ın Enleri</title>

    <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@400;700&display=swap" rel="stylesheet">

    <style>
        body {
            margin: 0;
            padding: 0;
            background: #FDF8FF;
            overflow: hidden;
            position: relative;
        }


        .fireworks-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1; /* Havai fişekleri tamamen arka plana alır */
            pointer-events: none; /* Butonlara veya üstteki içeriklere tıklamayı engellemez */
        }


        .content-container {
            position: relative;
            z-index: 2; /* İçerik havai fişeklerin üstünde */
            padding: 20px;
            color: #fff;
        }


        .navbar {
            z-index: 10; /* Navigasyon çubuğu için daha yüksek bir z-index değeri */
            position: relative;
        }


        .leaderboard {
            max-width: 600px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.9); /* Yarı şeffaf arka plan */
            border-radius: 12px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }

        .leaderboard-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .leaderboard-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 15px 20px;
            border-bottom: 1px solid #ddd;
            transition: transform 0.2s ease-in-out;
        }

            .leaderboard-item:hover {
                transform: scale(1.02);
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            }

        .rank {
            color: #000;
            width: 60px;
            text-align: center;
            font-size: 1.5rem;
        }

        .user-info {
            display: flex;
            align-items: center;
            width: 60%;
            gap: 10px;
        }

        .profile-pic {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
        }

        .user-name {
            flex: 1;
            font-weight: bold;
            font-size: 1rem;
            color: #333;
        }

        .points {
            text-align: right;
            font-size: 1rem;
            color: #5a5ac9;
        }

        .page-title {
            color: #000; /* Siyah renk */
            font-size: 2.5rem;
            font-family: 'Dancing Script', cursive; /* El yazısı fontu */

            text-align: center;
        }
    </style>
</head>
<body>
    <!-- Havai fişekler için -->
    <div class="fireworks-container"></div>

    <!-- Sosyal Sokak'ın Enleri -->
    <div class="container content-container mt-5">
        <h2 class="page-title">Sosyal Sokak'ın Enleri</h2>

        <div class="leaderboard">
            <ul class="leaderboard-list">
                @if (kullanıcılar != null)
                {
                    int sıra = 1;

                    foreach (var kullanıcı in kullanıcılar)
                    {
                        <li class="leaderboard-item">
                            <span class="rank">
                                @if (sıra == 1)
                                {
                                    <span>🥇</span> <!-- 1. Madalya -->
                                }
                                else if (sıra == 2)
                                {
                                    <span>🥈</span> <!-- 2. Madalya -->
                                }
                                else if (sıra == 3)
                                {
                                    <span>🥉</span> <!-- 3. Madalya -->
                                }
                                else
                                {
                                    <span>@sıra.</span> <!-- Normal sıra -->
                                }
                            </span>
                            <div class="user-info">
                                <img src="@kullanıcı.ProfilFotografi" alt="Profil Fotoğrafı" class="profile-pic">
                                <span class="user-name">@kullanıcı.Ad @kullanıcı.Soyad</span>
                            </div>
                            <div class="points">@kullanıcı.ToplamPuan Puan</div>
                        </li>
                        sıra++;
                    }
                }
                else
                {
                    <p class="text-center">Henüz puanlamaya katılan kullanıcı bulunmamaktadır.</p>
                }
            </ul>
        </div>
    </div>

    <script>
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');
        document.querySelector('.fireworks-container').appendChild(canvas);

        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let fireworks = [];
        let particles = [];

        class Firework {
            constructor(x, targetY) {
                this.x = x;
                this.y = canvas.height;
                this.targetY = targetY;
                this.colors = this.generateColors(); // Rastgele renk kombinasyonu
                this.speed = Math.random() * 1.5 + 3;
                this.trail = [];
                this.exploded = false;
            }

            generateColors() {
                // Renk kombinasyonları (1, 2 veya 3 renk)
                const numColors = Math.floor(Math.random() * 3) + 1; // 1, 2 veya 3 renk
                const colors = [];
                for (let i = 0; i < numColors; i++) {
                    const hue = Math.random() * 360;
                    colors.push(`hsl(${hue}, 100%, 60%)`);
                }
                return colors;
            }

            update() {
                if (this.y > this.targetY) {
                    this.y -= this.speed;
                    this.trail.push({ x: this.x, y: this.y });
                    if (this.trail.length > 15) this.trail.shift();
                } else if (!this.exploded) {
                    this.explode();
                    this.exploded = true;
                }
            }

            draw() {
                if (!this.exploded) {
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, 3, 0, Math.PI * 2);
                    ctx.fillStyle = this.colors[0]; // İlk rengi göster
                    ctx.fill();
                }

                for (let i = 0; i < this.trail.length; i++) {
                    const trailPart = this.trail[i];
                    ctx.beginPath();
                    ctx.arc(trailPart.x, trailPart.y, 2, 0, Math.PI * 2);
                    ctx.fillStyle = this.colors[0]; // İzde ilk rengi kullan
                    ctx.globalAlpha = (i + 1) / this.trail.length;
                    ctx.fill();
                    ctx.globalAlpha = 1;
                }
            }

            explode() {
                const numParticles = 100 + Math.random() * 50; // Parçacık sayısını dinamik belirliyoruz (100-150 arasında)
                for (let i = 0; i < numParticles; i++) {
                    const angle = Math.random() * Math.PI * 2; // Parçacıkların yayılma açısı
                    const speed = Math.random() * 3 + 2; // Parçacık hızı
                    const color = this.colors[Math.floor(Math.random() * this.colors.length)]; // Renk kombinasyonundan seç
                    particles.push(new Particle(this.x, this.y, color, angle, speed));
                }
            }
        }

        class Particle {
            constructor(x, y, color, angle, speed) {
                this.x = x;
                this.y = y;
                this.color = color;
                this.angle = angle;
                this.speed = speed;
                this.alpha = 1;
                this.gravity = 0.05;
                this.size = Math.random() * 3 + 1;
            }

            update() {
                this.x += Math.cos(this.angle) * this.speed;
                this.y += Math.sin(this.angle) * this.speed + this.gravity;
                this.speed *= 0.98; // Hızın zamanla azalması
                this.alpha -= 0.01;
            }

            draw() {
                if (this.alpha > 0) {
                    ctx.globalAlpha = this.alpha;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                    ctx.fillStyle = this.color;
                    ctx.fill();
                    ctx.globalAlpha = 1;
                }
            }
        }




        function animate() {
            ctx.fillStyle = 'rgba(253, 248, 255, 0.1)'; // #FDF8FF renginin yarı şeffaf bir versiyonu
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            fireworks = fireworks.filter(firework => !firework.exploded || particles.some(p => p.alpha > 0));
            particles = particles.filter(particle => particle.alpha > 0);

            fireworks.forEach(firework => {
                firework.update();
                firework.draw();
            });

            particles.forEach(particle => {
                particle.update();
                particle.draw();
            });

            requestAnimationFrame(animate);
        }

        // Havai fişek oluşturma
        setInterval(() => {
            const numberOfFireworks = Math.floor(Math.random() * 3) + 2; // Her döngüde 2-4 havai fişek
            for (let i = 0; i < numberOfFireworks; i++) {
                const x = Math.random() * canvas.width; // Rastgele x pozisyonu
                const targetY = Math.random() * canvas.height / 2 + canvas.height / 4; // Ekranın ortası ile üst kısmı arasında rastgele hedef
                fireworks.push(new Firework(x, targetY));
            }
        }, 1200); // Her 1.2 saniyede yeni havai fişek grubu


        animate();
    </script>

</body>
</html>
